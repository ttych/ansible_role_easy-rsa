---

- name: check ca state
  stat:
    path: "{{ easy_rsa_ca_pki }}"
  register: t_easyrsa_ca_stat

- name: init pki for ca
  command: /usr/local/bin/easyrsa init-pki
  args:
    chdir: "{{ easy_rsa_ca_dir }}"
  become: yes
  become_user: "{{ easy_rsa_user }}"
  when: not t_easyrsa_ca_stat.stat.exists

- name: check ca vars state
  stat:
    path: "{{ easy_rsa_ca_vars }}"
  register: t_easyrsa_ca_vars_stat

- name: deploy std vars for ca
  copy:
    src: "{{ easy_rsa_app_dir }}/vars.example"
    dest: "{{ easy_rsa_ca_vars }}"
    remote_src: yes
    mode: "0600"
    owner: "{{ easy_rsa_user }}"
    group: "{{ easy_rsa_group }}"
  when: not t_easyrsa_ca_vars_stat.stat.exists

- name: set vars for ca
  lineinfile:
    path: "{{ easy_rsa_ca_vars }}"
    regexp: "^set_var\\s+{{ item.key }}\\s"
    line: "set_var {{ item.key }} {{ item.value }}"
  loop: "{{ easy_rsa_vars_security + easy_rsa_vars_org + easy_rsa_vars_ca }}"

- name: check ca private key passphrase
  stat:
    path: "{{ easy_rsa_ca_passphrase }}"
  register: t_easyrsa_ca_private_key_passphrase_stat

- block:
    - name: create ca private key passphrase
      command: apg -m 30 -n 1 -a 1
      args:
        chdir: "{{ easy_rsa_ca_dir }}"
      become: yes
      become_user: "{{ easy_rsa_user }}"
      register: t_easyrsa_ca_private_key_passphrase

    - name: save ca passphrase
      copy:
        content: "{{ t_easyrsa_ca_private_key_passphrase.stdout }}"
        dest: "{{ easy_rsa_ca_passphrase }}"
        mode: "0600"
        owner: "{{ easy_rsa_user }}"
        group: "{{ easy_rsa_group }}"

  when: not t_easyrsa_ca_private_key_passphrase_stat.stat.exists

- name: check ca certs
  stat:
    path: "{{ easy_rsa_ca_pki }}/ca.crt"
  register: t_easyrsa_ca_cert_stat

- name: build-ca
  command: "{{ easy_rsa_app_dir }}/easyrsa --passin=file:{{ easy_rsa_ca_passphrase }} --passout=file:{{ easy_rsa_ca_passphrase }} --batch build-ca"
  args:
    chdir: "{{ easy_rsa_ca_dir }}"
  become: yes
  become_user: "{{ easy_rsa_user }}"
  when: not t_easyrsa_ca_cert_stat.stat.exists




- name: check requests state
  stat:
    path: "{{ easy_rsa_requests_pki }}"
  register: t_easyrsa_requests_stat

- name: init pki for requests
  command: /usr/local/bin/easyrsa init-pki
  args:
    chdir: "{{ easy_rsa_requests_dir }}"
  become: yes
  become_user: "{{ easy_rsa_user }}"
  when: not t_easyrsa_requests_stat.stat.exists

- name: create certs directory in requests pki
  file:
    path: "{{ easy_rsa_requests_pki }}/certs"
    owner: "{{ easy_rsa_user }}"
    group: "{{ easy_rsa_group }}"
    mode: "0700"
    state: directory

- name: check requests vars state
  stat:
    path: "{{ easy_rsa_requests_vars }}"
  register: t_easyrsa_requests_vars_stat

- name: deploy std vars for requests
  copy:
    src: "{{ easy_rsa_app_dir }}/vars.example"
    dest: "{{ easy_rsa_requests_vars }}"
    remote_src: yes
    mode: "0600"
    owner: "{{ easy_rsa_user }}"
    group: "{{ easy_rsa_group }}"
  when: not t_easyrsa_requests_vars_stat.stat.exists

- name: set vars for requests
  lineinfile:
    path: "{{ easy_rsa_requests_vars }}"
    regexp: "^set_var\\s+{{ item.key }}\\s"
    line: "set_var {{ item.key }} {{ item.value }}"
  loop: "{{ easy_rsa_vars_security + easy_rsa_vars_org + easy_rsa_vars_requests }}"
